using System;
using System.Collections.Generic;
using System.IO;
using MessagePack;
using SimpleLauncher.Models;
using SimpleLauncher.Services;

namespace SimpleLauncher.Managers;

/// <summary>
/// Manages loading, saving, and accessing the local cache of all RetroAchievements games.
/// This data is stored in 'RetroAchievements.dat' and is generated by the DataFetcher tool.
/// </summary>
[MessagePackObject]
public class RetroAchievementsManager
{
    /// <summary>
    /// A complete list of all games with RetroAchievements support, loaded from the .dat file.
    /// </summary>
    [Key(0)]
    public List<RaGameInfo> AllGames { get; set; } = [];

    // Dictionary for fast hash lookups
    private Dictionary<string, RaGameInfo> _hashToGameInfoLookup;

    /// <summary>
    /// The path to the data file.
    /// </summary>
    private static string DatFilePath { get; } = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "RetroAchievements.dat");

    /// <summary>
    /// Loads the RetroAchievements game cache from the .dat file.
    /// If the file doesn't exist, a new, empty instance is created and saved.
    /// </summary>
    /// <returns>An instance of RetroAchievementsManager.</returns>
    public static RetroAchievementsManager Load()
    {
        var manager = new RetroAchievementsManager(); // Create an instance first

        if (File.Exists(DatFilePath))
        {
            try
            {
                var bytes = File.ReadAllBytes(DatFilePath);
                // Ensure there's content to deserialize to avoid errors with empty files.
                if (bytes.Length > 0)
                {
                    // The root object in the .dat file is a List<RaGameInfo>,
                    // so we deserialize that directly and wrap it in our manager.
                    manager.AllGames = MessagePackSerializer.Deserialize<List<RaGameInfo>>(bytes);
                }
            }
            catch (Exception ex)
            {
                // Notify developer of the corrupted or invalid file.
                const string contextMessage = "Error loading RetroAchievements.dat. The file might be corrupted or invalid. A new empty file will be created.";
                _ = LogErrors.LogErrorAsync(ex, contextMessage);
                // Fall through to create a new default manager.
            }
        }

        // Populate the hash lookup dictionary after loading AllGames
        manager.PopulateHashLookup();

        // If the file doesn't exist, is empty, or fails to load, create a new instance.
        // And if AllGames is still empty, ensure the file is created (or overwritten if corrupted)
        if (manager.AllGames.Count == 0)
        {
            manager.Save(); // Create the initial (empty) file.
        }

        return manager;
    }

    /// <summary>
    /// Populates the internal dictionary for fast hash-to-gameinfo lookups.
    /// </summary>
    private void PopulateHashLookup()
    {
        _hashToGameInfoLookup = new Dictionary<string, RaGameInfo>(StringComparer.OrdinalIgnoreCase);
        foreach (var game in AllGames)
        {
            foreach (var hash in game.Hashes)
            {
                // Add the hash to the dictionary. If a hash maps to multiple games,
                // we'll just take the first one encountered. This is a simplification.
                // RetroAchievements API usually handles this by returning the primary game.
                _hashToGameInfoLookup.TryAdd(hash, game);
            }
        }

        DebugLogger.Log($"[RA Manager] Populated hash lookup with {_hashToGameInfoLookup.Count} entries.");
    }

    /// <summary>
    /// Retrieves RaGameInfo by a given hash from the in-memory lookup.
    /// </summary>
    /// <param name="hash">The hash to look up.</param>
    /// <returns>The matching RaGameInfo, or null if not found.</returns>
    public RaGameInfo GetGameInfoByHash(string hash)
    {
        if (string.IsNullOrEmpty(hash))
        {
            return null;
        }

        _hashToGameInfoLookup ??= new Dictionary<string, RaGameInfo>(StringComparer.OrdinalIgnoreCase); // Ensure initialized
        _hashToGameInfoLookup.TryGetValue(hash, out var gameInfo);
        return gameInfo;
    }

    /// <summary>
    /// Saves the current list of games to the RetroAchievements.dat file.
    /// </summary>
    public void Save()
    {
        try
        {
            // Serialize just the list of games, as that's the structure of the .dat file.
            var bytes = MessagePackSerializer.Serialize(AllGames);
            File.WriteAllBytes(DatFilePath, bytes);
        }
        catch (Exception ex)
        {
            // Notify developer of the save error.
            const string contextMessage = "Error saving RetroAchievements.dat.";
            _ = LogErrors.LogErrorAsync(ex, contextMessage);

            // Re-throw to let the caller know the save operation failed.
            throw;
        }
    }
}